####
# Header block that defines the properties of this DTC
####

# Type of DTC. Streaming or Window
# The Streaming DTC processes the raw data and converts it into sessions

Type: ProductML:DTC:Streaming
Version: '2018-03-23'
Description: Level 1 transformation from streaming Raw Data
Name: fbt_v1

# The field in the raw data around which data is aggregated. This is usually a unique user id

Identity: source.appInstanceId
Time: parse_time(source.event_time, 'YYYY/mm/dd HH:MM:SS')

##
# The raw data is converted to sessions and stored in persistent storage such as DynamoDB (a Store)
# Store properties. Only DynamoDB is supported currently
##

Store:
   - Type: ProductML:DTC:Storage:DynamoDB
     Name: fbt_v1_dynamo
     Retention: 180
     Table: fbt_test

DataGroups:

 - Type: ProductML:DTC:DataGroup:IdentityAggregate
   Name: user
   Store: fbt_v1_dynamo
   When: source.event_name = 'session_start'

   Fields:
     - Name: appInstanceId
       Value: source.appInstanceId

   Fields:
     - Name: age
       Value: source.age

    Fields:
     - Name: gender
       Value: source.gender

    Fields:
     - Name: country
       Value: source.country

    Fields:
     - Name: days_since_install
       Value: datetime.strptime("source.start_time", "%d %m %Y") - datetime.strptime("source.first_open_time", "%d %m %Y")

##
# Session aggregates definition
##

 - Type: ProductML:DTC:DataGroup:SessionAggregate
   Name: item_stats
   Store: fbt_v1_dynamo
   Split: source.session_id != session_id

   Fields:

     - Name: product_primary
       Type: list
       Value: item_stats.product_primary.append(source.item_id)
       When: source.event_name == 'view_item'

   Fields:
     - Name: transaction_value_this_session
       Type: float
       Value: sum(source.value)
       #This also sums all the values in the list if multiple items were bought in one transaction
       When: source.event_name = 'ecommerce_purchase' and source.currency = 'usd'

   Fields:
     - Name: products_bought
       Type: list
       Value: zip(item_stats.products_bought.append(source.item_id), item_stats.products_bought.append(source.value))
       # This creates a list of tuples [(item_id1, value1), (item_id2, value2)...]
       When: source.event_name = 'ecommerce_purchase' and source.currency = 'usd'
